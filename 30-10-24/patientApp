using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; } 
        public string BookingDate { get; set; }

    }
}


IPatient

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public interface IPatient
    {
        ObservableCollection<Patient> Patients { get; }
        void RegisterPatient(Patient patient);
    }
}


PatientViewModel.cs

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public class PatientViewModel : IPatient
    {
        public event EventHandler<Patient> OnPatientRegistered;
        public event EventHandler<string> PatientRegistered;

        public ObservableCollection<Patient> Patients { get; private set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; private set; }


        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            
            // Raise an event for notification
            OnPatientRegistered?.Invoke(this, patient);
            PatientRegistered?.Invoke(this, "Registration Completed");
        }

        public void ConfirmPatients(List<Patient> selectedPatients)
        {
            ConfirmedPatients.Clear();
            foreach (var patient in selectedPatients)
            {
                ConfirmedPatients.Add(patient);
            }
        }
    }
}






MainWindow.xaml


<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PatientApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Canvas>
        <TextBlock Text="Patient Management System" FontSize="29" Canvas.Left="200" Canvas.Top="10" FontWeight="Bold"/>
        <Button x:Name="btnRegistration" Content="Register Patient" Canvas.Left="10" Canvas.Top="80" Click="btnRegistration_Click" />
        <Button x:Name="btnAppointment" Content="Appointment Confirmation" Canvas.Left="10" Canvas.Top="130" Click="btnAppointment_Click" />
        <Button x:Name="btnDashboard" Content="Patient Dashboard" Canvas.Left="10" Canvas.Top="180" Click="btnDashboard_Click"/>
        <ContentControl x:Name="MainContent" Canvas.Left="200" Canvas.Top="60" Width="400" Height="300" HorizontalAlignment="Center" VerticalAlignment="Center">
        </ContentControl>
    </Canvas>
</Window>


MainWindow.xaml.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private PatientViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new PatientViewModel();
            _viewModel.OnPatientRegistered += OnPatientRegistered;
            _viewModel.OnAppointmentConfirmed += OnAppointmentConfirmed;


        }

        private void OnAppointmentConfirmed(object sender, Patient e)
        {
            MessageBox.Show("Appointment confirmed successfully.");


        }

        private void OnPatientRegistered(object sender, Patient patient)
        {
            MessageBox.Show($"Patient {patient.Name} registered!", "Registration Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var patientRegControl = new PatientRegControl(_viewModel);
            patientRegControl.RegistrationCompleted += (s,args) => MainContent.Content = null;
            patientRegControl.NavigateToAppointment += (s,args) =>
            {
                var appointmentControl = new AppointmentConfirmationControl(_viewModel);
                appointmentControl.AppointmentCompleted += (s1, args1) => MainContent.Content = null;
                MainContent.Content = appointmentControl;
                appointmentControl.NavigateToDashboard += (s2, args2) =>
                {
                    var patientDashboardControl = new PatientDashboardControl(_viewModel);
                    patientDashboardControl.DashboardCompleted += (s1, args1) => MainContent.Content = null;
                    MainContent.Content = patientDashboardControl;
                };
            };
            MainContent.Content = patientRegControl;
        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentConfirmationControl = new AppointmentConfirmationControl(_viewModel);
            appointmentConfirmationControl.AppointmentCompleted += (s,args) => MainContent.Content = null;
            MainContent.Content = appointmentConfirmationControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl(_viewModel);
            MainContent.Content = patientDashboardControl;
        }
    }
}








PatientRegControl.xaml


<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Canvas Width="400" Height="450">
        <TextBlock Text="Name" Canvas.Left="10" Canvas.Top="10"/>
        <TextBox x:Name="NameTextBox" Width="200" Canvas.Left="10" Canvas.Top="30"/>

        <TextBlock Text="Age" Canvas.Left="10" Canvas.Top="70"/>
        <TextBox x:Name="AgeTextBox" Width="200" Canvas.Left="10" Canvas.Top="90"/>

        <TextBlock Text="Date of Birth" Canvas.Left="10" Canvas.Top="130"/>
        <DatePicker x:Name="DOBPicker" Width="200" Canvas.Left="10" Canvas.Top="150"/>

        <TextBlock Text="Address" Canvas.Left="10" Canvas.Top="190"/>
        <TextBox x:Name="AddressTextBox" Width="200" Canvas.Left="10" Canvas.Top="210"/>

        <TextBlock Text="Slot" Canvas.Left="10" Canvas.Top="250"/>
        <ComboBox x:Name="SlotComboBox" Width="200" Canvas.Left="10" Canvas.Top="270">
            <ComboBoxItem Content="Morning"/>
            <ComboBoxItem Content="Evening"/>
        </ComboBox>

        <TextBlock Text="Booking Date" Canvas.Left="10" Canvas.Top="310"/>
        <DatePicker x:Name="BookingDate" Width="200" Canvas.Left="10" Canvas.Top="330"/>
        
        <Button x:Name="btnRegister" Content="Register" Width="100" Canvas.Left="10" Canvas.Top="380" Click="btnRegister_Click"/>
    </Canvas>
</UserControl>


PatientRegControl.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    /// <summary>
    /// Interaction logic for PatientRegControl.xaml
    /// </summary>
    public partial class PatientRegControl : UserControl
    {
        private PatientViewModel _viewModel;
        public event EventHandler NavigateToAppointment;
        public event EventHandler RegistrationCompleted;

        public PatientRegControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            // Input validation
            string name = NameTextBox.Text.Trim();
            string address = AddressTextBox.Text.Trim();
            DateTime? dateOfBirth = DOBPicker.SelectedDate;
            string slot = (SlotComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();
            
            DateTime? bookingDate = BookingDatePicker.SelectedDate;

            // Validate Name
            if (string.IsNullOrWhiteSpace(name))
            {
                MessageBox.Show("Please enter a valid name.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Age
            if (!int.TryParse(AgeTextBox.Text, out int age) || age <= 0)
            {
                MessageBox.Show("Please enter a valid age (positive integer).", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Date of Birth
            if (!dateOfBirth.HasValue)
            {
                MessageBox.Show("Please select a valid date of birth.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Slot
            if (string.IsNullOrWhiteSpace(slot))
            {
                MessageBox.Show("Please select a time slot.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Address
            if (string.IsNullOrWhiteSpace(address))
            {
                MessageBox.Show("Please enter a valid address.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Create Patient object
            var patient = new Patient
            {
                Name = name,
                Age = age,
                BookingDate = DOBPicker.SelectedDate.HasValue ? DOBPicker.SelectedDate.Value.ToString("yyyy-MM-dd") :DateTime.Now.ToString("yyyy-MM-dd"),
                Address = address,
                Slot = slot,
                DateOfBirth = BookingDatePicker.SelectedDate.Value.ToString("yyyy-MM-dd")
            };

            try
            {
                // Register the patient
                _viewModel.RegisterPatient(patient);
                //MessageBox.Show("Patient details entered successfully.", "Registration Success", MessageBoxButton.OK, MessageBoxImage.Information);
                RegistrationCompleted?.Invoke(this,EventArgs.Empty);

                // Trigger navigation to appointment confirmation
                NavigateToAppointment?.Invoke(this,EventArgs.Empty);
            }
            catch (Exception ex)
            {
                // Handle any exceptions that occur during registration
                MessageBox.Show($"An error occurred while registering the patient: {ex.Message}", "Registration Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}







AppointmentConfirmationControl



<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel >
        <TextBlock Text="Appointment Confirmation" FontSize="24" FontWeight="Bold" Margin="0,0,0,20"/>
        <TextBox x:Name="RegistrationStatusTextBox" IsReadOnly="True"  />

        <ListBox x:Name="PatientsListBox" Height="150" >
            <!-- Items will be added dynamically in the code-behind -->
        </ListBox>

        <Button x:Name="btnConfirm" Content="Confirm Appointment"  Margin="0,20,0,0" Click="btnConfirm_Click"/>
    </StackPanel>
</UserControl>




AppointmentConfirmationControl.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    public partial class AppointmentConfirmationControl : UserControl
    {
        private PatientViewModel _viewModel;
        public event Action NavigateToDashboard;
        public event Action AppointmentCompleted;

        public AppointmentConfirmationControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            _viewModel.PatientRegistered += OnPatientRegistered;
            LoadPatients();
        }

        private void OnPatientRegistered(object sender, string message)
        {
            Dispatcher.Invoke(() =>
            {
                RegistrationStatusTextBox.Text = message;
            });
            
        }

        private void LoadPatients()
        {
            foreach (var patient in _viewModel.Patients)
            {
                var checkBox = new CheckBox
                {
                    Content = $"{patient.Name} (Age: {patient.Age}, DOB: {patient.DateOfBirth.ToShortDateString()}, Address: {patient.Address})",
                    Tag = patient
                };
                PatientsListBox.Items.Add(checkBox);
            }
        }

        private void btnConfirm_Click(object sender, RoutedEventArgs e)
        {
            var selectedPatients = new List<Patient>();
            for (int i = PatientsListBox.Items.Count - 1; i >= 0; i--)
            {
                CheckBox checkBox = PatientsListBox.Items[i] as CheckBox;
                if (checkBox != null && checkBox.IsChecked == true && checkBox.Tag is Patient patient)
                {
                    selectedPatients.Add(patient);
                    PatientsListBox.Items.RemoveAt(i);
                }
            }

            foreach (var confirmedPatient in selectedPatients)
            {
                _viewModel.Patients.Remove(confirmedPatient);
            }

            _viewModel.ConfirmPatients(selectedPatients);
            MessageBox.Show("Appointment confirmed successfully.");
            AppointmentCompleted?.Invoke();
            NavigateToDashboard?.Invoke();
        }
    }
}







PatientDashBoardControl.xaml


<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Patient Dashboard" FontSize="24" FontWeight="Bold"/>
        <TextBox x:Name="RegistrationStatusTextBox" IsReadOnly="True" Width="300" Height="30" Margin="0,10,0,10"/>
        <DataGrid x:Name="grdPatients" ItemsSource="{Binding Patients}" AutoGenerateColumns="True"/>
    </StackPanel>
</UserControl>




PatientDashBoardControl.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    public partial class PatientDashboardControl : UserControl
    {
        private PatientViewModel _viewModel;
        public event EventHandler DashboardCompleted;

        public PatientDashboardControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel;
            //_viewModel.PatientRegistered += OnPatientRegistered;
            grdPatients.ItemsSource = _viewModel.ConfirmedPatients;
            DashboardCompleted?.Invoke(this, EventArgs.Empty);
        }

        //private void OnPatientRegistered(object sender, string message)
        //{
        //    Dispatcher.Invoke(() =>
        //    {
        //        RegistrationStatusTextBox.Text = message;
        //    });

        //}


    }
}
