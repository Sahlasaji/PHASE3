using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;

namespace PatientAdmissionApp
{
     public class PatientViewModel : BaseViewModel, Ipatient
    {
        public event EventHandler ShowRegistrationRequested;
        public event EventHandler AppointmentUpdated;
        public event EventHandler RegisterPatientRequested;
        public event EventHandler ConfirmAppointmentRequested;
        public event EventHandler CancelAppointmentRequested;


        public ObservableCollection<PatientModel> Patients { get; set; } = new ObservableCollection<PatientModel>();
        public ObservableCollection<PatientModel> ConfirmedPatients { get; set; } = new ObservableCollection<PatientModel>();

        private PatientModel _newPatient;
        public PatientModel NewPatient
        {
            get { return _newPatient; }
            set { _newPatient = value; OnPropertyChanged(); }
        }
        public PatientViewModel()
        {
            NewPatient = new PatientModel();
        }

        private void RequestShowRegistration(object parameter)
        {
            ShowRegistrationRequested?.Invoke(this, EventArgs.Empty);
        }

        public void RegisterPatient(object parameter)
        {
            Patients.Add(new PatientModel
            {
                Name = NewPatient.Name,
                Dateofbirth = NewPatient.Dateofbirth,
                Age = DateTime.Now.Year - NewPatient.Dateofbirth.Year,
                Address = NewPatient.Address,
                Slot = NewPatient.Slot,
                BookingDate = NewPatient.BookingDate
               
            });
            NewPatient = new PatientModel();
            RegisterPatientRequested?.Invoke(this, EventArgs.Empty);
            MessageBox.Show("Registration Success!!!!");
        }

        public void ConfirmAppointment(PatientModel patient)
        {
            if (patient != null)
            {
                // Move patient to ConfirmedPatients and remove from Patients
                patient.ConfirmationStatus = "Confirmed";
               

                ConfirmedPatients.Add(patient);
                Patients.Remove(patient);
                AppointmentUpdated?.Invoke(this,EventArgs.Empty);
                ConfirmAppointmentRequested?.Invoke(this, EventArgs.Empty);
                MessageBox.Show($"{patient.Name}'s appointment confirmed.");
            }
        }

        public void CancelAppointment(PatientModel patient)
        {
            if (patient != null)
            {
                // Remove patient from Patients
                Patients.Remove(patient);
                CancelAppointmentRequested?.Invoke(this, EventArgs.Empty);
                MessageBox.Show($"{patient.Name}'s appointment has been canceled.");
            }
        }
    }
}




using System.Windows;

namespace PatientAdmissionApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            this.DataContext = new PatientViewModel();

        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {


            var confirmationControl = new PatientRegistrationControl();


            var mainWindow = Window.GetWindow(this) as MainWindow;
            if (mainWindow != null)
            {
                mainWindow.MainContent.Content = confirmationControl;
            }

        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentControl = new AppointmentControl();
            var appointmentWindow = Window.GetWindow(this) as MainWindow;

            if (appointmentWindow != null)
            {
                appointmentWindow.MainContent.Content = appointmentControl;

            }
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl();
            var patientDashboard = Window.GetWindow(this) as MainWindow;

            if (patientDashboard != null)
            {
                patientDashboard.MainContent.Content = patientDashboardControl;

            }
        }

        private void Window_Closed(object sender, System.EventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}

modify mainwindow.xaml.cs based on the patientviewmodel
