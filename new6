using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; } 
        public string BookingDate { get; set; }

    }
}

iPatient.cs
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public interface IPatient
    {
        ObservableCollection<Patient> Patients { get; }
        void RegisterPatient(Patient patient);
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public class PatientViewModel : IPatient
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler<Patient> OnPatientRegistered;
        public event EventHandler<Patient> OnAppointmentConfirmed;

        public event EventHandler<string> PatientRegistered;

        public ObservableCollection<Patient> Patients { get; private set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; private set; }

        private string _registrationMessage;
        public string RegistrationMessage
        {
            get => _registrationMessage;
            set
            {
                _registrationMessage = value;
                OnPropertyChanged(nameof(RegistrationMessage));
            }

        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            
            // Raise an event for notification
            RegistrationMessage = $"Patient {patient.Name} Registered";
            OnPatientRegistered?.Invoke(this, patient);
            PatientRegistered?.Invoke(this, "Registration Completed");
        }

        public void ConfirmPatients(List<Patient> selectedPatients)
        {
            //ConfirmedPatients.Clear();
            foreach (var patient in selectedPatients)
            {
                ConfirmedPatients.Add(patient);
            }
            OnAppointmentConfirmed?.Invoke(this,null);
        }
    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp.viewmodel
{

    public class PatientRegViewModel : INotifyPropertyChanged
    {
        private PatientViewModel _mainViewModel;

        private string _name;
        private int _age;
        private string _dateOfBirth;
        private string _address;
        private string _slot;
        private DateTime? _bookingDate;

        public string Name
        {
            get => _name;
            set
            {
                _name = value;
                OnPropertyChanged(nameof(Name));
            }
        }

        public int Age
        {
            get => _age;
            set
            {
                _age = value;
                OnPropertyChanged(nameof(Age));
            }
        }

        public string DateOfBirth
        {
            get => _dateOfBirth;
            set
            {
                _dateOfBirth = value;
                OnPropertyChanged(nameof(DateOfBirth));
            }
        }

        public string Address
        {
            get => _address;
            set
            {
                _address = value;
                OnPropertyChanged(nameof(Address));
            }
        }

        public string Slot
        {
            get => _slot;
            set
            {
                _slot = value;
                OnPropertyChanged(nameof(Slot));
            }
        }

        public DateTime? BookingDate
        {
            get => _bookingDate;
            set
            {
                _bookingDate = value;
                OnPropertyChanged(nameof(BookingDate));
            }
        }

        public PatientRegViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void RegisterPatient()
        {
            var patient = new Patient
            {
                Name = Name,
                Age = Age,
                DateOfBirth = DateOfBirth,
                Address = Address,
                Slot = Slot,
                BookingDate = BookingDate?.ToString("yyyy-MM-dd")
            };

            _mainViewModel.RegisterPatient(patient);
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp.viewmodel
{
    public class PatientDashboardViewModel : INotifyPropertyChanged
    {
        private PatientViewModel _mainViewModel;

        public ObservableCollection<Patient> ConfirmedPatients => _mainViewModel.ConfirmedPatients;

        public PatientDashboardViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp.viewmodel
{
    public class AppointmentConfirmationViewModel : INotifyPropertyChanged
    {
        private PatientViewModel _mainViewModel;

        public AppointmentConfirmationViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void ConfirmAppointment(List<Patient> selectedPatients)
        {
            _mainViewModel.ConfirmPatients(selectedPatients);
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PatientApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Canvas>
        <TextBlock Text="Patient Management System" FontSize="29" Canvas.Left="200" Canvas.Top="10" FontWeight="Bold"/>
        <Button x:Name="btnRegistration" Content="Register Patient" Canvas.Left="10" Canvas.Top="80" Click="btnRegistration_Click" />
        <Button x:Name="btnAppointment" Content="Appointment Confirmation" Canvas.Left="10" Canvas.Top="130" Click="btnAppointment_Click" />
        <Button x:Name="btnDashboard" Content="Patient Dashboard" Canvas.Left="10" Canvas.Top="180" Click="btnDashboard_Click"/>
        <ContentControl x:Name="MainContent" Canvas.Left="200" Canvas.Top="60" Width="400" Height="300" HorizontalAlignment="Center" VerticalAlignment="Center">
        </ContentControl>
    </Canvas>
</Window>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    public partial class MainWindow : Window
    {
        private PatientViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new PatientViewModel();
            this.DataContext = _viewModel; // Set DataContext for potential bindings
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var patientRegControl = new PatientRegControl(_viewModel);
            patientRegControl.RegistrationCompleted += (s, args) => ShowMessage($"Patient {args} registered!");
            patientRegControl.NavigateToAppointment += (s, args) => ShowAppointmentConfirmation();
            MainContent.Content = patientRegControl;
        }

        private void ShowAppointmentConfirmation()
        {
            var appointmentControl = new AppointmentConfirmationControl(_viewModel);
            appointmentControl.AppointmentCompleted += (s, args) => ShowMessage("Appointment confirmed successfully.");
            MainContent.Content = appointmentControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl(_viewModel);
            MainContent.Content = patientDashboardControl;
        }

        private void ShowMessage(string message)
        {
            MessageBox.Show(message, "Information", MessageBoxButton.OK, MessageBoxImage.Information);
        }
         private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            ShowAppointmentConfirmation();
        }
    }
}
<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel >
        <TextBlock Text="{Binding PatientName,ElementName =  AppointmentConfirmationControl}" FontSize="24" FontWeight="Bold" Margin="0,0,0,20"/>
        <TextBox x:Name="RegistrationTextBox" Text="{Binding RegistrationMessage}" IsReadOnly="True"  />

        <ListBox x:Name="PatientsListBox" Height="150" DisplayMemberPath="Name" >
            <!-- Items will be added dynamically in the code-behind -->
        </ListBox>

        <Button x:Name="btnConfirm" Content="Confirm Appointment"  Margin="0,20,0,0" Click="btnConfirm_Click"/>
    </StackPanel>
</UserControl>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientApp.viewmodel;

namespace PatientApp
{
    public partial class AppointmentConfirmationControl : UserControl
    {
        private AppointmentConfirmationViewModel _viewModel;
        public event EventHandler AppointmentCompleted;

        public AppointmentConfirmationControl(PatientViewModel mainViewModel)
        {
            InitializeComponent();
            _viewModel = new AppointmentConfirmationViewModel(mainViewModel);
            
        }

        private void btnConfirm_Click(object sender, RoutedEventArgs e)
        {
            var selectedPatients = new List<Patient>();
            for (int i = PatientsListBox.Items.Count - 1; i >= 0; i--)
            {
                CheckBox checkBox = PatientsListBox.Items[i] as CheckBox;
                if (checkBox != null && checkBox.IsChecked == true && checkBox.Tag is Patient patient)
                {
                    selectedPatients.Add(patient);
                    PatientsListBox.Items.RemoveAt(i);
                }
            }

            _viewModel.ConfirmAppointment(selectedPatients);
            AppointmentCompleted?.Invoke(this, EventArgs.Empty);
            // Optionally trigger navigation to the dashboard or show a message.
        }
    }
}

<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Patient Dashboard" FontSize="24" FontWeight="Bold"/>
        <TextBox x:Name="RegistrationStatusTextBox" Text="{Binding RegistrationMessage}" IsReadOnly="True" Width="300" Height="30" Margin="0,10,0,10"/>
        <DataGrid x:Name="grdPatients" ItemsSource="{Binding Patients}" AutoGenerateColumns="True"/>
    </StackPanel>
</UserControl>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientApp.viewmodel;

namespace PatientApp
{
    public partial class PatientDashboardControl : UserControl
    {
        private PatientDashboardViewModel _viewModel;

        public PatientDashboardControl(PatientViewModel mainViewModel)
        {
            InitializeComponent();
            _viewModel = new PatientDashboardViewModel(mainViewModel);
            DataContext = _viewModel;
        }
    }
}

<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             d:DesignHeight="450" d:DesignWidth="800">
    <Canvas Width="400" Height="450">
        <TextBlock Text="Name" Canvas.Left="10" Canvas.Top="10"/>
        <TextBox x:Name="NameTextBox" Width="200" Canvas.Left="10" Canvas.Top="30"/>

        <TextBlock Text="Age" Canvas.Left="10" Canvas.Top="70"/>
        <TextBox x:Name="AgeTextBox" Width="200" Canvas.Left="10" Canvas.Top="90"/>

        <TextBlock Text="Date of Birth" Canvas.Left="10" Canvas.Top="130"/>
        <DatePicker x:Name="DOBPicker"  SelectedDateFormat="Short"  DisplayDateStart="{x:Static sys:DateTime.Now}" Canvas.Left="10" Canvas.Top="331"/>

        <TextBlock Text="Address" Canvas.Left="10" Canvas.Top="190"/>
        <TextBox x:Name="AddressTextBox" Width="200" Canvas.Left="10" Canvas.Top="210"/>

        <TextBlock Text="Slot" Canvas.Left="10" Canvas.Top="250"/>
        <ComboBox x:Name="SlotComboBox" Width="200" Canvas.Left="10" Canvas.Top="270">
            <ComboBoxItem Content="Morning"/>
            <ComboBoxItem Content="Evening"/>
        </ComboBox>

        <TextBlock Text="Booking Date" Canvas.Left="10" Canvas.Top="310"/>
        <DatePicker x:Name="BookingDatePicker" SelectedDateFormat="Short" DisplayDateEnd="{x:Static sys:DateTime.Now}"  Canvas.Left="10" Canvas.Top="151" HorizontalAlignment="Left" VerticalAlignment="Center"/>

        <Button x:Name="btnRegister" Content="Register" Width="100" Canvas.Left="10" Canvas.Top="380" Click="btnRegister_Click"/>
    </Canvas>
</UserControl>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using PatientApp.viewmodel;

namespace PatientApp
{
    public partial class PatientRegControl : UserControl
    {
        private PatientRegViewModel _viewModel;
        public event EventHandler<string> RegistrationCompleted;
        public event EventHandler NavigateToAppointment;

        public PatientRegControl(PatientViewModel mainViewModel)
        {
            InitializeComponent();
            _viewModel = new PatientRegViewModel(mainViewModel);
            DataContext = _viewModel;
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RegisterPatient();
            // Option ally, you can trigger navigation or other actions here if needed.
            RegistrationCompleted?.Invoke(this,_viewModel.Name);
            NavigateToAppointment?.Invoke(this, EventArgs.Empty);
        }
    }
}
