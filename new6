using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace PatientApp
{
    public class PatientViewModel : IPatient, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler<Patient> OnPatientRegistered;
        public event EventHandler<string> PatientRegistered;

        public ObservableCollection<Patient> Patients { get; private set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; private set; }

        private string _registrationMessage;
        public string RegistrationMessage
        {
            get => _registrationMessage;
            set
            {
                _registrationMessage = value;
                OnPropertyChanged(nameof(RegistrationMessage));
            }
        }

        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            RegistrationMessage = $"Patient {patient.Name} Registered";
            OnPatientRegistered?.Invoke(this, patient);
            PatientRegistered?.Invoke(this, "Registration Completed");
        }

        public void ConfirmPatients(List<Patient> selectedPatients)
        {
            foreach (var patient in selectedPatients)
            {
                ConfirmedPatients.Add(patient);
                Patients.Remove(patient);
            }
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
using System;
using System.Windows.Input;

namespace PatientApp
{
    public class PatientRegControlViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private string _name;
        private int _age;
        private DateTime? _dateOfBirth;
        private string _address;
        private string _slot;
        private DateTime? _bookingDate;

        public string Name
        {
            get => _name;
            set { _name = value; OnPropertyChanged(nameof(Name)); }
        }

        public int Age
        {
            get => _age;
            set { _age = value; OnPropertyChanged(nameof(Age)); }
        }

        public DateTime? DateOfBirth
        {
            get => _dateOfBirth;
            set { _dateOfBirth = value; OnPropertyChanged(nameof(DateOfBirth)); }
        }

        public string Address
        {
            get => _address;
            set { _address = value; OnPropertyChanged(nameof(Address)); }
        }

        public string Slot
        {
            get => _slot;
            set { _slot = value; OnPropertyChanged(nameof(Slot)); }
        }

        public DateTime? BookingDate
        {
            get => _bookingDate;
            set { _bookingDate = value; OnPropertyChanged(nameof(BookingDate)); }
        }

        public ICommand RegisterCommand { get; }

        public PatientRegControlViewModel(PatientViewModel mainViewModel)
        {
            RegisterCommand = new RelayCommand(param => RegisterPatient(mainViewModel));
        }

        private void RegisterPatient(PatientViewModel mainViewModel)
        {
            var patient = new Patient
            {
                Name = Name,
                Age = Age,
                DateOfBirth = DateOfBirth?.ToString("yyyy-MM-dd"),
                Address = Address,
                Slot = Slot,
                BookingDate = BookingDate?.ToString("yyyy-MM-dd")
            };

            mainViewModel.RegisterPatient(patient);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows.Input ```csharp
namespace PatientApp
{
    public class AppointmentConfirmationControlViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public ObservableCollection<Patient> Patients { get; set; }
        public ICommand ConfirmCommand { get; }

        public AppointmentConfirmationControlViewModel(PatientViewModel mainViewModel)
        {
            Patients = new ObservableCollection<Patient>(mainViewModel.Patients);
            ConfirmCommand = new RelayCommand(param => ConfirmPatients(mainViewModel));
        }

        private void ConfirmPatients(PatientViewModel mainViewModel)
        {
            // Logic to confirm patients
            var selectedPatients = new List<Patient>();
            foreach (var patient in Patients)
            {
                if (patient.IsSelected) // Assuming you have a property to check if the patient is selected
                {
                    selectedPatients.Add(patient);
                }
            }

            mainViewModel.ConfirmPatients(selectedPatients);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
using System.Collections.ObjectModel;

namespace PatientApp
{
    public class PatientDashboardControlViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public ObservableCollection<Patient> ConfirmedPatients { get; set; }

        public PatientDashboardControlViewModel(PatientViewModel mainViewModel)
        {
            ConfirmedPatients = new ObservableCollection<Patient>(mainViewModel.ConfirmedPatients);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Name" />
        <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" />
        <TextBlock Text="Age" />
        <TextBox Text="{Binding Age, UpdateSourceTrigger=PropertyChanged}" />
        <TextBlock Text="Date of Birth" />
        <DatePicker SelectedDate="{Binding DateOfBirth, UpdateSourceTrigger=PropertyChanged}" />
        <TextBlock Text="Address" />
        <TextBox Text="{Binding Address, UpdateSourceTrigger=PropertyChanged}" />
        <TextBlock Text="Slot" />
        <ComboBox SelectedItem="{Binding Slot, UpdateSourceTrigger=PropertyChanged}">
            <ComboBoxItem Content="Morning"/>
            <ComboBoxItem Content="Evening"/>
        </ComboBox>
        <TextBlock Text="Booking Date" />
        <DatePicker SelectedDate="{Binding BookingDate, UpdateSourceTrigger=PropertyChanged}" />
        <Button Command="{Binding RegisterCommand}" Content="Register" />
    </StackPanel>
</User Control>

<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Appointment Confirmation" FontSize="24" FontWeight="Bold" />
        <ListBox ItemsSource="{Binding Patients}">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <CheckBox Content="{Binding Name}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <Button Command="{Binding ConfirmCommand}" Content="Confirm Appointment" />
    </StackPanel>
</User Control>

<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Patient Dashboard" FontSize="24" FontWeight=" Bold"/>
        <DataGrid ItemsSource="{Binding ConfirmedPatients}" AutoGenerateColumns="True"/>
    </StackPanel>
</User Control>

<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Canvas>
        <TextBlock Text="Patient Management System" FontSize="29" Canvas.Left="200" Canvas.Top="10" FontWeight="Bold"/>
        <Button x:Name="btnRegistration" Content="Register Patient" Canvas.Left="10" Canvas.Top="80" Click="btnRegistration_Click" />
        <Button x:Name="btnAppointment" Content="Appointment Confirmation" Canvas.Left="10" Canvas.Top="130" Click="btnAppointment_Click" />
        <Button x:Name="btnDashboard" Content="Patient Dashboard" Canvas.Left="10" Canvas.Top="180" Click="btnDashboard_Click"/>
        <ContentControl x:Name="MainContent" Canvas.Left="200" Canvas.Top="60" Width="400" Height="300" HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Canvas>
</Window>
using System.Windows;

namespace PatientApp
{
    public partial class MainWindow : Window
    {
        private PatientViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new PatientViewModel();
            this.Closed += (s, e) => UnsubscribeEvents();
        }

        private void UnsubscribeEvents()
        {
            // Unsubscribe from events if needed
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var patientRegControl = new PatientRegControl(_viewModel);
            MainContent.Content = patientRegControl;
        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentConfirmationControl = new AppointmentConfirmationControl(_viewModel);
            MainContent.Content = appointmentConfirmationControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl(_viewModel);
            MainContent.Content = patientDashboardControl;
        }
    }
}

using System;
using System.Windows.Input;

namespace PatientApp
{
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);

        public void Execute(object parameter) => _execute(parameter);

        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;
            remove => CommandManager.RequerySuggested -= value;
        }
    }
}


