
### Overview of the Project Flow

The **PatientApp** project is designed to manage patient registrations, appointment confirmations, and display patient information in a dashboard. It uses the MVVM (Model-View-ViewModel) design pattern and event-driven programming to facilitate communication between different components.

Here's a step-by-step explanation of the flow:

1. **Model** (`Patient` and `IPatient`):
   - The `Patient` class holds information about a patient, such as `Name`, `Age`, `DateOfBirth`, etc.
   - The `IPatient` interface defines the contract for the `PatientViewModel`, ensuring that patient registration and management functionalities are implemented.

2. **ViewModel** (`PatientViewModel`):
   - The `PatientViewModel` is responsible for handling the business logic and state management. It contains a list of patients (`ObservableCollection<Patient>`) and handles operations like registering patients (`RegisterPatient`) and confirming appointments (`ConfirmPatients`).
   - It exposes several events (`OnPatientRegistered`, `OnAppointmentConfirmed`, etc.) to notify the View (UI) about changes in the data or actions.
   - **PropertyChanged** is implemented for the `RegistrationMessage` property, allowing the View to update when the registration message changes.

3. **View** (`MainWindow`, `PatientRegControl`, `AppointmentConfirmationControl`, etc.):
   - The **MainWindow.xaml** is the entry point, containing buttons that trigger different operations (registration, appointment confirmation, and dashboard).
   - When a user clicks on **Register Patient**, a `PatientRegControl` is loaded where the user can input patient details.
   - Once registration is complete, the `AppointmentConfirmationControl` is loaded, where the user can confirm appointments.
   - After appointment confirmation, the `PatientDashboardControl` displays the registered and confirmed patients.

4. **Data Binding**:
   - Data binding is used to bind properties like `RegistrationMessage` and `Patients` between the ViewModel and the View, ensuring that the UI reflects changes in data without needing explicit updates.

---

### Events and Event Handlers

Events are used to notify the View of changes in the ViewModel or to communicate actions between different components. Here's a breakdown:

1. **Event Declaration**:
   - In `PatientViewModel`, the following events are declared:
     - `OnPatientRegistered`: Fired when a patient is successfully registered.
     - `OnAppointmentConfirmed`: Fired when appointments are confirmed.
     - `PatientRegistered`: Fired when the registration process is completed.
   - These events are used to trigger actions in the View, such as showing a message box or updating UI components.

2. **Event Handler**:
   - In **MainWindow.xaml.cs**, event handlers are subscribed to the events in `PatientViewModel`:
     - The handler `OnPatientRegistered` shows a message box when a patient is registered.
     - The handler `OnAppointmentConfirmed` shows a message box when an appointment is confirmed.
     - These handlers are subscribed to in the constructor of `MainWindow`:
       ```csharp
       _viewModel.OnPatientRegistered += OnPatientRegistered;
       _viewModel.OnAppointmentConfirmed += OnAppointmentConfirmed;
       ```

3. **Subscribing to Events**:
   - Subscribing to events means the View (MainWindow) listens for specific actions or changes that happen in the ViewModel (such as registering a patient or confirming an appointment).
   - **Example**:
     ```csharp
     _viewModel.OnPatientRegistered += OnPatientRegistered;
     ```
     This tells the MainWindow to listen for the `OnPatientRegistered` event, and when it occurs, the `OnPatientRegistered` method will be called to show a message.

4. **Unsubscribing from Events**:
   - It's good practice to unsubscribe from events to avoid memory leaks, especially in WPF applications where controls are dynamically loaded.
   - In the `MainWindow`, events are unsubscribed in the `Closed` event handler:
     ```csharp
     this.Closed += (s,e) => UnsubscribeEvents();
     ```
   - The `UnsubscribeEvents` method detaches the handlers:
     ```csharp
     private void UnsubscribeEvents()
     {
         _viewModel.OnPatientRegistered -= OnPatientRegistered;
         _viewModel.OnAppointmentConfirmed -= OnAppointmentConfirmed;
     }
     ```

5. **Event Triggering**:
   - When the `RegisterPatient` method in `PatientViewModel` is called, it adds the patient to the `Patients` collection and triggers the `OnPatientRegistered` event.
   - Similarly, when `ConfirmPatients` is called, the `OnAppointmentConfirmed` event is triggered.

6. **Custom Events in UserControls**:
   - In `PatientRegControl` and `AppointmentConfirmationControl`, custom events like `NavigateToAppointment`, `RegistrationCompleted`, and `AppointmentCompleted` are defined. These events allow navigation between different views and trigger actions in the ViewModel.

   Example:
   ```csharp
   public event EventHandler NavigateToAppointment;
   public event EventHandler RegistrationCompleted;
   ```

   These events are triggered using:
   ```csharp
   RegistrationCompleted?.Invoke(this, EventArgs.Empty);
   NavigateToAppointment?.Invoke(this, EventArgs.Empty);
   ```

   These events notify the MainWindow to load the next UserControl (e.g., `AppointmentConfirmationControl` after registration).

---

### Flow and Event Subscription in Action

- When the user clicks **Register Patient**, a `PatientRegControl` is loaded, where the user can enter patient details.
  - After registration, the `RegistrationCompleted` event is triggered, causing the `NavigateToAppointment` event to be triggered, and the **AppointmentConfirmationControl** is loaded.
  
- Inside **AppointmentConfirmationControl**, the `PatientRegistered` event is subscribed to in the ViewModel, which updates the UI with the registration message. After selecting patients and confirming appointments, the `AppointmentCompleted` event is triggered.

- Finally, when the **PatientDashboardControl** is loaded, the `DashboardCompleted` event is triggered to signal the completion of the dashboard loading.

---

### Summary of Event Flow:

1. **MainWindow** subscribes to `OnPatientRegistered` and `OnAppointmentConfirmed` events from the ViewModel.
2. The **PatientRegControl** triggers `RegistrationCompleted` and `NavigateToAppointment` events to load the next UserControl.
3. **AppointmentConfirmationControl** handles confirming patients, triggering `AppointmentCompleted` and `NavigateToDashboard`.
4. The **PatientDashboardControl** displays the final list of patients, using the `DashboardCompleted` event to finalize the process.

This flow ensures that different components are loosely coupled, and events provide a clean way to manage communication and navigation within the application.
