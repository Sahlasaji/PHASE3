PatientRegViewModel.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;
using System.Windows;

namespace PatientApp
{
    public class PatientRegViewModel
    {
        private readonly PatientViewModel _mainViewModel;

        public PatientRegViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void RegisterPatient(string name, int age, string dateOfBirth, string address, string slot, string bookingDate)
        {
            var patient = new Patient
            {
                Name = name,
                Age = age,
                DateOfBirth = dateOfBirth,
                Address = address,
                Slot = slot,
                BookingDate = bookingDate
            };

            _mainViewModel.RegisterPatient(patient);
        }
    }
}
AppointmentConfirmationViewModel.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Collections.Generic;

namespace PatientApp
{
    public class AppointmentConfirmationViewModel
    {
        private readonly PatientViewModel _mainViewModel;

        public AppointmentConfirmationViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void ConfirmAppointments(List<Patient> selectedPatients)
        {
            _mainViewModel.ConfirmPatients(selectedPatients);
        }
    }
}
PatientDashboardViewModel.cs
csharp

Verify

Open In Editor
Edit
Copy code
namespace PatientApp
{
    public class PatientDashboardViewModel
    {
        private readonly PatientViewModel _mainViewModel;

        public PatientDashboardViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void UpdateDashboard()
        {
            // Logic to update the dashboard can be added here if needed
        }
    }
}
Step 2: Update User Controls to Use New View Models
PatientRegControl.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;
using System.Windows;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class PatientRegControl : UserControl
    {
        private PatientRegViewModel _viewModel;
        public event EventHandler NavigateToAppointment;
        public event EventHandler RegistrationCompleted;

        public PatientRegControl(PatientViewModel mainViewModel)
        {
            InitializeComponent();
            _viewModel = new PatientRegViewModel(mainViewModel);
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            // Input validation (same as before)
            // ...

            // Register the patient
            _viewModel.RegisterPatient(name, age, dateOfBirth, address, slot, bookingDate);
            RegistrationCompleted?.Invoke(this, EventArgs.Empty);
            NavigateToAppointment?.Invoke(this, EventArgs.Empty);
        }
    }
}
AppointmentConfirmationControl.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class AppointmentConfirmationControl : UserControl
    {
        private AppointmentConfirmationViewModel _viewModel;
        public event EventHandler NavigateToDashboard;
        public event EventHandler AppointmentCompleted;

        public AppointmentConfirmationControl(PatientViewModel mainViewModel)
        {
            InitializeComponent();
            _viewModel = new AppointmentConfirmationViewModel(mainViewModel);
            LoadPatients();
        }

        private void LoadPatients()
        {
            foreach (var patient in _viewModel.Patients)
            {
                var checkBox = new CheckBox
                {
                    Content = $"{patient.Name} (Age: {patient.Age}, DOB: {patient.DateOfBirth}, Address: {patient.Address}, BookingDate: {patient.BookingDate})",
                    Tag = patient
                };
                PatientsListBox.Items.Add(checkBox);
            }
        }

        private void btnConfirm_Click(object sender, RoutedEventArgs e)
        {
            var selectedPatients = new List<Patient>();
            foreach (CheckBox checkBox in PatientsListBox.Items)
            {
                if (checkBox.IsChecked == true && checkBox.Tag is Patient patient)
                {
                    selectedPatients.Add(patient);
                }
            }

            _viewModel.ConfirmAppointments(selectedPatients);
            AppointmentCompleted?.Invoke(this, EventArgs.Empty);
            NavigateToDashboard?.Invoke(this, EventArgs.Empty);
        }
    }
}
PatientDashboardControl.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Windows;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class PatientDashboardControl : UserControl
    {
        private PatientDashboardViewModel _viewModel;

        public PatientDashboardControl(PatientViewModel mainViewModel

continue


Certainly! Let's continue with the implementation of the PatientDashboardControl.xaml.cs file and ensure that it uses the new PatientDashboardViewModel.

3. PatientDashboardControl.xaml.cs (continued)
csharp

Verify

Open In Editor
Edit
Copy code
        public PatientDashboardControl(PatientViewModel mainViewModel)
        {
            InitializeComponent();
            _viewModel = new PatientDashboardViewModel(mainViewModel);
            DataContext = _viewModel; // Set the DataContext for data binding
            grdPatients.ItemsSource = mainViewModel.ConfirmedPatients; // Bind the DataGrid to the ConfirmedPatients collection
        }
    }
}
Step 3: Update the MainWindow.xaml.cs
In the MainWindow.xaml.cs, you will need to ensure that the user controls are instantiated with the main PatientViewModel and that the navigation logic remains intact. Hereâ€™s how you can do that:

csharp

Verify

Open In Editor
Edit
Copy code
using System.Windows;

namespace PatientApp
{
    public partial class MainWindow : Window
    {
        private PatientViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new PatientViewModel();
            this.Closed += (s, e) => UnsubscribeEvents();
        }

        private void UnsubscribeEvents()
        {
            // Unsubscribe from any events if necessary
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var patientRegControl = new PatientRegControl(_viewModel);
            patientRegControl.RegistrationCompleted += (s, args) => MainContent.Content = null;
            patientRegControl.NavigateToAppointment += (s, args) =>
            {
                var appointmentControl = new AppointmentConfirmationControl(_viewModel);
                appointmentControl.AppointmentCompleted += (s1, args1) => MainContent.Content = null;
                appointmentControl.NavigateToDashboard += (s2, args2) =>
                {
                    var patientDashboardControl = new PatientDashboardControl(_viewModel);
                    MainContent.Content = patientDashboardControl;
                };
                MainContent.Content = appointmentControl;
            };
            MainContent.Content = patientRegControl;
        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentConfirmationControl = new AppointmentConfirmationControl(_viewModel);
            appointmentConfirmationControl.AppointmentCompleted += (s, args) => MainContent.Content = null;
            MainContent.Content = appointmentConfirmationControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl(_viewModel);
            MainContent.Content = patientDashboardControl;
        }
    }
}
