PatientRegViewModel.cs

csharp

Edit
Copy code
using System;
using System.Windows.Input;

namespace PatientApp
{
    public class PatientRegViewModel : INotifyPropertyChanged
    {
        private PatientViewModel _mainViewModel;

        public string Name { get; set; }
        public int Age { get; set; }
        public string DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; }
        public DateTime? BookingDate { get; set; }

       public ICommand RegisterCommand { get; }

        public PatientRegViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
            RegisterCommand = new RelayCommand(RegisterPatient);
        }

        private void RegisterPatient()
        {
            var patient = new Patient
            {
                Name = Name,
                Age = Age,
                DateOfBirth = DateOfBirth,
                Address = Address,
                Slot = Slot,
               BookingDate = BookingDate?.ToString("yyyy-MM-dd")
            };

            _mainViewModel.RegisterPatient(patient);
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
AppointmentConfirmationViewModel.cs

csharp

Edit
Copy code
using System.Collections.Generic;
using System.Windows.Input;

namespace PatientApp
{
    public class AppointmentConfirmationViewModel : INotifyPropertyChanged
    {
        private PatientViewModel _mainViewModel;

        public ICommand ConfirmAppointmentCommand { get; }

        public AppointmentConfirmationViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
            ConfirmAppointmentCommand = new RelayCommand(ConfirmAppointment);
        }

        private void ConfirmAppointment(List<Patient> selectedPatients)
        {
            _mainViewModel.ConfirmPatients(selectedPatients);
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
PatientDashboardViewModel.cs

csharp

Edit
Copy code
using System.Collections.ObjectModel;

namespace PatientApp
{
    public class PatientDashboardViewModel : INotifyPropertyChanged
    {
        private PatientViewModel _mainViewModel;

        public ObservableCollection<Patient> ConfirmedPatients => _mainViewModel.ConfirmedPatients;

        public PatientDashboardViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
2. Modify UserControl Code-Behind

Update the code-behind of each UserControl to set the DataContext to the corresponding ViewModel.

PatientRegControl.xaml.cs

csharp

Edit
Copy code
public partial class PatientRegControl : UserControl
{
    private PatientRegViewModel _viewModel;

    public PatientRegControl(PatientViewModel mainViewModel)
    {
        InitializeComponent();
        _viewModel = new PatientRegViewModel(mainViewModel);
        DataContext = _viewModel;
    }
}
AppointmentConfirmationControl.xaml.cs

csharp

Edit
Copy code
public partial class AppointmentConfirmationControl : UserControl
{
    private AppointmentConfirmationViewModel _viewModel;

    public AppointmentConfirmationControl(PatientViewModel mainViewModel)
    {
        InitializeComponent();
        _viewModel = new AppointmentConfirmationViewModel(mainViewModel);
        DataContext = _viewModel;
    }
}
PatientDashboardControl.xaml.cs

csharp

Edit
Copy code
public partial class PatientDashboardControl : UserControl
{
    private PatientDashboardViewModel _viewModel;

    public PatientDashboardControl(PatientViewModel mainViewModel)
    {
        InitializeComponent();
        _viewModel = new PatientDashboardViewModel(mainViewModel);
        DataContext = _viewModel;
    }
}
3. Update XAML Bindings

Now, update the XAML of each UserControl to bind the UI elements to the properties in the respective ViewModels.

PatientRegControl.xaml

xml

Edit
Copy code
<TextBox x:Name="NameTextBox" Text="{Binding Name}" Width="200" Canvas.Left="10" Canvas.Top="30"/>
<TextBox x:Name="AgeTextBox" Text="{Binding Age}" Width="200" Canvas.Left="10" Canvas.Top="90"/>
<DatePicker x:Name="DOBPicker" SelectedDate="{Binding DateOfBirth}" Canvas.Left="10" Canvas.Top="331"/>
<TextBox x:Name="AddressTextBox" Text="{Binding Address}" Width="200" Canvas.Left="10" Canvas.Top="210"/>
<ComboBox x:Name="SlotComboBox" SelectedItem="{Binding Slot}" Width="200" Canvas.Left="10" Canvas.Top="270">
    <ComboBoxItem Content="Morning"/>
    <ComboBoxItem Content="Evening"/>
</ComboBox>
<DatePicker x:Name="BookingDatePicker" SelectedDate="{Binding BookingDate}" Canvas.Left="10" Canvas.Top="151"/>
<Button x:Name="btnRegister" Content="Register" Width="100" Canvas.Left="10" Canvas.Top="380" Command="{Binding RegisterCommand}"/>
AppointmentConfirmationControl.xaml

xml

Edit
Copy code1
<Button x:Name="btnConfirm" Content="Confirm Appointment" Margin="0,20,0,0" Command="{Binding ConfirmAppointmentCommand}"/>
PatientDashboardControl.xaml

xml

Edit
Copy code
<DataGrid x:Name="grdPatients" ItemsSource="{Binding ConfirmedPatients}" AutoGenerateColumns="True"/>
Conclusion

By following these steps, you have successfully created separate ViewModels for each UserControl, keeping the code-behind clean and adhering to the MVVM pattern. This structure enhances maintainability and testability, allowing for easier updates and modifications in the future.
