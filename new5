
Here's the complete code with all the logic included for each component:

### 1. Patient Model

**Patient.cs**
```csharp
namespace PatientApp
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }
}
```

### 2. ViewModels

**PatientRegistrationViewModel.cs**
```csharp
using System;
using System.ComponentModel;

namespace PatientApp
{
    public class PatientRegistrationViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler<Patient> PatientRegistered;

        private string _registrationMessage;
        public string RegistrationMessage
        {
            get => _registrationMessage;
            set
            {
                _registrationMessage = value;
                OnPropertyChanged(nameof(RegistrationMessage));
            }
        }

        public void RegisterPatient(Patient patient)
        {
            RegistrationMessage = $"Patient {patient.Name} has been successfully registered!";
            PatientRegistered?.Invoke(this, patient);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

**AppointmentConfirmationViewModel.cs**
```csharp
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace PatientApp
{
    public class AppointmentConfirmationViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler AppointmentConfirmed;

        public ObservableCollection<Patient> Patients { get; set; } = new ObservableCollection<Patient>();

        public void ConfirmAppointments()
        {
            AppointmentConfirmed?.Invoke(this, EventArgs.Empty);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

**PatientDashboardViewModel.cs**
```csharp
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace PatientApp
{
    public class PatientDashboardViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<Patient> ConfirmedPatients { get; set; } = new ObservableCollection<Patient>();

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

### 3. Main Window

**MainWindow.xaml**
```xml
<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Patient Application" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Horizontal">
            <Button Name="btnRegistration" Content="Register Patient" Click="btnRegistration_Click" />
            <Button Name="btnAppointment" Content="Confirm Appointments" Click="btnAppointment_Click" />
            <Button Name="btnDashboard" Content="Patient Dashboard" Click="btnDashboard_Click" />
        </StackPanel>
        <ContentControl Name="MainContent" Grid.Row="1" />
    </Grid>
</Window>
```

**MainWindow.xaml.cs**
```csharp
using System.Windows;

namespace PatientApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var registrationControl = new PatientRegControl();
            MainContent.Content = registrationControl;
        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentControl = new AppointmentConfirmationControl();
            MainContent.Content = appointmentControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var dashboardControl = new PatientDashboardControl();
            MainContent.Content = dashboardControl;
        }
    }
}
```

### 4. UserControls

**PatientRegControl.xaml**
```xml
<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <TextBox Name="txtName" PlaceholderText="Enter Patient Name" />
        <TextBox Name="txtAge" PlaceholderText="Enter Patient Age" />
        <Button Content="Register" Click="btnRegister_Click" />
        <TextBlock Text="{Binding RegistrationMessage}" />
    </StackPanel>
</UserControl>
```

**PatientRegControl.xaml.cs**
```csharp
using System;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class PatientRegControl : UserControl
    {
        private PatientRegistrationViewModel _viewModel;

        public PatientRegControl()
        {
            InitializeComponent();
            _viewModel = new PatientRegistrationViewModel();
            DataContext = _viewModel;
        }

        private void btnRegister_Click(object sender, System.Windows.RoutedEventArgs e)
        {
            var patient = new Patient { Name = txtName.Text, Age = int.Parse(txtAge.Text) };
            _viewModel.RegisterPatient(patient);
        }
    }
}
```

**AppointmentConfirmationControl.xaml**
```xml
<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <Button Content="Confirm Appointments" Click="btnConfirm_Click" />
        <ListBox ItemsSource="{Binding Patients}" DisplayMemberPath="Name" />
    </StackPanel>
</UserControl>
```

**AppointmentConfirmationControl.xaml.cs**
```csharp
using System;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class AppointmentConfirmationControl : UserControl
    {
        private AppointmentConfirmationViewModel _viewModel;

        public AppointmentConfirmationControl()
        {
            InitializeComponent();
            _viewModel = new AppointmentConfirmationViewModel();
            DataContext = _viewModel;
        }

        private void btnConfirm_Click(object sender, System.Windows.RoutedEventArgs e)
        {
            _viewModel.ConfirmAppointments();
        }
    }
}
```

**PatientDashboardControl.xaml**
```xml
<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <TextBlock Text="Confirmed Patients:" FontWeight="Bold" />
        <ListBox ItemsSource="{Binding ConfirmedPatients}" DisplayMemberPath="Name" />
    </StackPanel>
</UserControl>
```

**PatientDashboardControl.xaml.cs**
```csharp
using System.Windows.Controls;

namespace PatientApp
{
    public partial class PatientDashboardControl : UserControl
    {
        private PatientDashboardViewModel _viewModel;

        public PatientDashboardControl()
        {
            InitializeComponent();
            _viewModel = new PatientDashboardViewModel();
            DataContext = _viewModel;
        }
    }
}
```

This setup enables `MainWindow` to load each UserControl without directly referencing ViewModel instances. Each UserControl binds to its ViewModel and handles UI interactions independently.
