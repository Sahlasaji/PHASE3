1. Patient.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;

namespace PatientApp
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; }
        public string BookingDate { get; set; }
    }
}
2. IPatient.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Collections.ObjectModel;

namespace PatientApp
{
    public interface IPatient
    {
        ObservableCollection<Patient> Patients { get; }
        void RegisterPatient(Patient patient);
    }
}
3. PatientViewModel.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace PatientApp
{
    public class PatientViewModel : IPatient
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler<Patient> OnPatientRegistered;
        public event EventHandler<Patient> OnAppointmentConfirmed;

        public ObservableCollection<Patient> Patients { get; private set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; private set; }

        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            OnPatientRegistered?.Invoke(this, patient);
        }

        public void ConfirmPatients(ObservableCollection<Patient> selectedPatients)
        {
            foreach (var patient in selectedPatients)
            {
                ConfirmedPatients.Add(patient);
            }
            OnAppointmentConfirmed?.Invoke(this, null);
        }
    }
}
4. PatientRegViewModel.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;
using System.Windows;

namespace PatientApp
{
    public class PatientRegViewModel
    {
        private PatientViewModel _mainViewModel;

        public PatientRegViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void RegisterPatient(string name, int age, string dateOfBirth, string address, string slot, string bookingDate)
        {
            var patient = new Patient
            {
                Name = name,
                Age = age,
                DateOfBirth = dateOfBirth,
                Address = address,
                Slot = slot,
                BookingDate = bookingDate
            };

            _mainViewModel.RegisterPatient(patient);
            MessageBox.Show($"Patient {name} registered successfully!");
        }
    }
}
5. AppointmentConfirmationViewModel.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Collections.Generic;
using System.Windows;

namespace PatientApp
{
    public class AppointmentConfirmationViewModel
    {
        private PatientViewModel _mainViewModel;

        public AppointmentConfirmationViewModel(PatientViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
        }

        public void ConfirmAppointments(List<Patient> selectedPatients)
        {
            foreach (var patient in selectedPatients)
            {
                _mainViewModel.Patients.Remove(patient);
            }
            _mainViewModel.ConfirmPatients(new ObservableCollection<Patient>(selectedPatients));
            MessageBox.Show("Appointments confirmed successfully!");
        }
    }
}
6. MainWindow.xaml
xml

Verify

Open In Editor
Edit
Copy code
<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Canvas>
        <TextBlock Text="Patient Management System" FontSize="29" Canvas.Left="200" Canvas.Top="10" FontWeight="Bold"/>
        <Button x:Name="btnRegistration" Content="Register Patient" Canvas.Left="10" Canvas.Top="80" Click="btnRegistration_Click" />
        <Button x:Name="btnAppointment" Content="Appointment Confirmation" Canvas.Left="10" Canvas.Top="130" Click="btnAppointment_Click" />
        <Button x:Name="btnDashboard" Content="Patient Dashboard" Canvas.Left="10" Canvas.Top="180" Click="btnDashboard_Click"/>
        <ContentControl x:Name="MainContent" Canvas.Left="200" Canvas.Top="60" Width="400" Height="300" HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Canvas>
</Window>
7. **MainWindow.xaml.cs

continue


Certainly! Hereâ€™s the continuation of the code, including the MainWindow.xaml.cs, the user controls, and their respective view models.

7. MainWindow.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Windows;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class MainWindow : Window
    {
        private PatientViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new PatientViewModel();
            _viewModel.OnPatientRegistered += OnPatientRegistered;
            _viewModel.OnAppointmentConfirmed += OnAppointmentConfirmed;
        }

        private void OnAppointmentConfirmed(object sender, Patient e)
        {
            MessageBox.Show("Appointment confirmed successfully.");
        }

        private void OnPatientRegistered(object sender, Patient patient)
        {
            MessageBox.Show($"Patient {patient.Name} registered!", "Registration Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var patientRegViewModel = new PatientRegViewModel(_viewModel);
            var patientRegControl = new PatientRegControl(patientRegViewModel);
            patientRegControl.NavigateToAppointment += (s, args) =>
            {
                var appointmentControl = new AppointmentConfirmationControl(new AppointmentConfirmationViewModel(_viewModel));
                appointmentControl.AppointmentCompleted += (s1, args1) => MainContent.Content = null;
                MainContent.Content = appointmentControl;
            };
            MainContent.Content = patientRegControl;
        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentControl = new AppointmentConfirmationControl(new AppointmentConfirmationViewModel(_viewModel));
            MainContent.Content = appointmentControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl(_viewModel);
            MainContent.Content = patientDashboardControl;
        }
    }
}
8. PatientRegControl.xaml
xml

Verify

Open In Editor
Edit
Copy code
<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             d:DesignHeight="450" d:DesignWidth="800">
    <Canvas Width="400" Height="450">
        <TextBlock Text="Name" Canvas.Left="10" Canvas.Top="10"/>
        <TextBox x:Name="NameTextBox" Width="200" Canvas.Left="10" Canvas.Top="30"/>

        <TextBlock Text="Age" Canvas.Left="10" Canvas.Top="70"/>
        <TextBox x:Name="AgeTextBox" Width="200" Canvas.Left="10" Canvas.Top="90"/>

        <TextBlock Text="Date of Birth" Canvas.Left="10" Canvas.Top="130"/>
        <DatePicker x:Name="DOBPicker" Width="200" Canvas.Left="10" Canvas.Top="150"/>

        <TextBlock Text="Address" Canvas.Left="10" Canvas.Top="190"/>
        <TextBox x:Name="AddressTextBox" Width="200" Canvas.Left="10" Canvas.Top="210"/>

        <TextBlock Text="Slot" Canvas.Left="10" Canvas.Top="250"/>
        <ComboBox x:Name="SlotComboBox" Width="200" Canvas.Left="10" Canvas.Top="270">
            <ComboBoxItem Content="Morning"/>
            <ComboBoxItem Content="Evening"/>
        </ComboBox>

        <TextBlock Text="Booking Date" Canvas.Left="10" Canvas.Top="310"/>
        <DatePicker x:Name="BookingDatePicker" Width="200" Canvas.Left="10" Canvas.Top="330"/>
        
        <Button x:Name="btnRegister" Content="Register" Width="100" Canvas.Left="10" Canvas.Top="380" Click="btnRegister_Click"/>
    </Canvas>
</User Control>
9. PatientRegControl.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System;
using System.Windows;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class PatientRegControl : UserControl
    {
        private PatientRegViewModel _viewModel;
        public event EventHandler NavigateToAppointment;

        public PatientRegControl(PatientRegViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            string name = NameTextBox.Text.Trim();
            if (!int.TryParse(AgeTextBox.Text, out int age) || age <= 0)
            {
                MessageBox.Show("Please enter a valid age.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            string dateOfBirth = DOBPicker.SelectedDate?.ToString("yyyy-MM-dd");
            string address

continue


Certainly! Let's continue with the implementation of the PatientRegControl.xaml.cs and then proceed with the other user controls and their view models.

9. PatientRegControl.xaml.cs (continued)
csharp

Verify

Open In Editor
Edit
Copy code
            string address = AddressTextBox.Text.Trim();
            string slot = (SlotComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();
            string bookingDate = BookingDatePicker.SelectedDate?.ToString("yyyy-MM-dd");

            // Validate inputs
            if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(address) || string.IsNullOrWhiteSpace(slot) || string.IsNullOrWhiteSpace(dateOfBirth) || string.IsNullOrWhiteSpace(bookingDate))
            {
                MessageBox.Show("Please fill in all fields.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Register the patient using the view model
            _viewModel.RegisterPatient(name, age, dateOfBirth, address, slot, bookingDate);

            // Trigger navigation to appointment confirmation
            NavigateToAppointment?.Invoke(this, EventArgs.Empty);
        }
    }
}
10. AppointmentConfirmationControl.xaml
xml

Verify

Open In Editor
Edit
Copy code
<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Appointment Confirmation" FontSize="24" FontWeight="Bold" Margin="0,0,0,20"/>
        <ListBox x:Name="PatientsListBox" Height="150" />
        <Button x:Name="btnConfirm" Content="Confirm Appointment" Margin="0,20,0,0" Click="btnConfirm_Click"/>
    </StackPanel>
</User Control>
11. AppointmentConfirmationControl.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;

namespace PatientApp
{
    public partial class AppointmentConfirmationControl : UserControl
    {
        private AppointmentConfirmationViewModel _viewModel;
        public event EventHandler AppointmentCompleted;

        public AppointmentConfirmationControl(AppointmentConfirmationViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            LoadPatients();
        }

        private void LoadPatients()
        {
            foreach (var patient in _viewModel.Patients)
            {
                var checkBox = new CheckBox
                {
                    Content = $"{patient.Name} (Age: {patient.Age}, DOB: {patient.DateOfBirth}, Address: {patient.Address}, BookingDate: {patient.BookingDate})",
                    Tag = patient
                };
                PatientsListBox.Items.Add(checkBox);
            }
        }

        private void btnConfirm_Click(object sender, RoutedEventArgs e)
        {
            var selectedPatients = new List<Patient>();
            foreach (CheckBox checkBox in PatientsListBox.Items)
            {
                if (checkBox.IsChecked == true && checkBox.Tag is Patient patient)
                {
                    selectedPatients.Add(patient);
                }
            }

            _viewModel.ConfirmAppointments(selectedPatients);
            AppointmentCompleted?.Invoke(this, EventArgs.Empty);
        }
    }
}
12. PatientDashboardControl.xaml
xml

Verify

Open In Editor
Edit
Copy code
<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Patient Dashboard" FontSize="24" FontWeight="Bold"/>
        <DataGrid x:Name="grdPatients" ItemsSource="{Binding ConfirmedPatients}" AutoGenerateColumns="True"/>
    </StackPanel>
</User Control>
13. PatientDashboardControl.xaml.cs
csharp

Verify

Open In Editor
Edit
Copy code
using System.Windows.Controls;

namespace PatientApp
{
    public partial class PatientDashboardControl : UserControl
    {
        private PatientViewModel _viewModel;

        public PatientDashboardControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel;
        }
    }
}
using System.Collections.ObjectModel;

namespace PatientApp
{
    public class PatientViewModel
    {
        public ObservableCollection<Patient> Patients { get; set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; set; }

        public event EventHandler<Patient> OnPatientRegistered;
        public event EventHandler<Patient> OnAppointmentConfirmed;

        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(string name, int age, string dateOfBirth, string address, string slot, string bookingDate)
        {
            var patient = new Patient
            {
                Name = name,
                Age = age,
                DateOfBirth = dateOfBirth,
                Address = address,
                Slot = slot,
                BookingDate = bookingDate
            };

            Patients.Add(patient);
            OnPatientRegistered?.Invoke(this, patient);
        }

        public void ConfirmPatients(List<Patient> selectedPatients)
        {
            foreach (var patient in selectedPatients)
            {
                ConfirmedPatients.Add(patient);
                Patients.Remove(patient); // Optionally remove from Patients if you want to keep track of only confirmed patients
                OnAppointmentConfirmed?.Invoke(this, patient);
            }
        }
    }
}
