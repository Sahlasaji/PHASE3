Certainly! Below is the complete code with all the necessary implementations and logic for the WPF application using event-driven programming and separation of concerns with ViewModels.

### 1. **Patient Model (`Patient.cs`)**

This is a simple class representing the `Patient`.

```csharp
public class Patient
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string Address { get; set; }
}
```

### 2. **ViewModels**

The ViewModels are responsible for handling the logic and data of the application.

#### 2.1. **PatientRegViewModel (`PatientRegViewModel.cs`)**

This ViewModel is for managing patient registration.

```csharp
using System;
using System.ComponentModel;

namespace PatientApp
{
    public class PatientRegViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler RegistrationCompleted;
        public event EventHandler NavigateToAppointment;

        private Patient _patient;
        public Patient Patient
        {
            get => _patient;
            set
            {
                _patient = value;
                OnPropertyChanged(nameof(Patient));
            }
        }

        public PatientRegViewModel()
        {
            Patient = new Patient();
        }

        public void RegisterPatient()
        {
            // Validation or registration logic can be added here.
            if (string.IsNullOrEmpty(Patient.Name) || Patient.Age <= 0)
            {
                // Handle validation failure
                return;
            }

            RegistrationCompleted?.Invoke(this, EventArgs.Empty);
            NavigateToAppointment?.Invoke(this, EventArgs.Empty);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

#### 2.2. **AppointmentConfirmationViewModel (`AppointmentConfirmationViewModel.cs`)**

This ViewModel is responsible for confirming appointments.

```csharp
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace PatientApp
{
    public class AppointmentConfirmationViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler AppointmentCompleted;
        public event EventHandler NavigateToDashboard;

        public ObservableCollection<Patient> Patients { get; }
        public ObservableCollection<Patient> ConfirmedPatients { get; }

        public AppointmentConfirmationViewModel(ObservableCollection<Patient> patients)
        {
            Patients = patients;
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void ConfirmAppointments()
        {
            foreach (var patient in Patients)
            {
                ConfirmedPatients.Add(patient);
            }

            AppointmentCompleted?.Invoke(this, EventArgs.Empty);
            NavigateToDashboard?.Invoke(this, EventArgs.Empty);
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

#### 2.3. **PatientDashboardViewModel (`PatientDashboardViewModel.cs`)**

This ViewModel is responsible for managing the confirmed patients in the dashboard.

```csharp
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace PatientApp
{
    public class PatientDashboardViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public ObservableCollection<Patient> ConfirmedPatients { get; }

        public PatientDashboardViewModel(ObservableCollection<Patient> confirmedPatients)
        {
            ConfirmedPatients = confirmedPatients;
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

### 3. **MainWindow (`MainWindow.xaml.cs`)**

This is the code-behind of the `MainWindow.xaml`, which handles navigation and binds ViewModels to UserControls.

```csharp
public partial class MainWindow : Window
{
    private readonly ObservableCollection<Patient> _patients;
    private readonly PatientRegViewModel _patientRegViewModel;
    private readonly AppointmentConfirmationViewModel _appointmentConfirmationViewModel;
    private readonly PatientDashboardViewModel _dashboardViewModel;

    public MainWindow()
    {
        InitializeComponent();

        _patients = new ObservableCollection<Patient>();
        _patientRegViewModel = new PatientRegViewModel();
        _appointmentConfirmationViewModel = new AppointmentConfirmationViewModel(_patients);
        _dashboardViewModel = new PatientDashboardViewModel(_appointmentConfirmationViewModel.ConfirmedPatients);

        // Event handlers for navigation
        _patientRegViewModel.RegistrationCompleted += OnRegistrationCompleted;
        _patientRegViewModel.NavigateToAppointment += (s, e) => MainContent.Content = new AppointmentConfirmationControl { DataContext = _appointmentConfirmationViewModel };
        _appointmentConfirmationViewModel.AppointmentCompleted += (s, e) => MainContent.Content = new PatientDashboardControl { DataContext = _dashboardViewModel };
        _appointmentConfirmationViewModel.NavigateToDashboard += (s, e) => MainContent.Content = new PatientDashboardControl { DataContext = _dashboardViewModel };

        // Set initial content
        MainContent.Content = new PatientRegControl { DataContext = _patientRegViewModel };
    }

    private void btnRegistration_Click(object sender, RoutedEventArgs e)
    {
        MainContent.Content = new PatientRegControl { DataContext = _patientRegViewModel };
    }

    private void btnAppointment_Click(object sender, RoutedEventArgs e)
    {
        MainContent.Content = new AppointmentConfirmationControl { DataContext = _appointmentConfirmationViewModel };
    }

    private void btnDashboard_Click(object sender, RoutedEventArgs e)
    {
        MainContent.Content = new PatientDashboardControl { DataContext = _dashboardViewModel };
    }

    private void OnRegistrationCompleted(object sender, EventArgs e)
    {
        // Handle registration completion (e.g., navigate to confirmation page)
        MainContent.Content = new AppointmentConfirmationControl { DataContext = _appointmentConfirmationViewModel };
    }
}
```

### 4. **UserControls**

Each UserControl corresponds to a view, and each is bound to a specific ViewModel.

#### 4.1. **PatientRegControl.xaml**

```xml
<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Height="300" Width="300">
    <Grid>
        <TextBox x:Name="PatientName" Text="{Binding Patient.Name}" PlaceholderText="Enter Patient Name" />
        <TextBox x:Name="PatientAge" Text="{Binding Patient.Age}" PlaceholderText="Enter Patient Age" />
        <TextBox x:Name="PatientAddress" Text="{Binding Patient.Address}" PlaceholderText="Enter Patient Address" />
        <Button Content="Register" Click="RegisterButton_Click" />
    </Grid>
</UserControl>
```

#### 4.2. **PatientRegControl.xaml.cs**

```csharp
public partial class PatientRegControl : UserControl
{
    public PatientRegControl()
    {
        InitializeComponent();
    }

    private void RegisterButton_Click(object sender, RoutedEventArgs e)
    {
        if (DataContext is PatientRegViewModel viewModel)
        {
            viewModel.RegisterPatient();  // Trigger registration
        }
    }
}
```

#### 4.3. **AppointmentConfirmationControl.xaml**

```xml
<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Height="300" Width="300">
    <Grid>
        <Button Content="Confirm Appointments" Click="ConfirmButton_Click" />
    </Grid>
</UserControl>
```

#### 4.4. **AppointmentConfirmationControl.xaml.cs**

```csharp
public partial class AppointmentConfirmationControl : UserControl
{
    public AppointmentConfirmationControl()
    {
        InitializeComponent();
    }

    private void ConfirmButton_Click(object sender, RoutedEventArgs e)
    {
        if (DataContext is AppointmentConfirmationViewModel viewModel)
        {
            viewModel.ConfirmAppointments();  // Trigger confirmation
        }
    }
}
```

#### 4.5. **PatientDashboardControl.xaml**

```xml
<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Height="300" Width="300">
    <Grid>
        <ListView ItemsSource="{Binding ConfirmedPatients}">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" />
                    <GridViewColumn Header="Age" DisplayMemberBinding="{Binding Age}" />
                </GridView>
            </ListView.View>
        </ListView>
    </Grid>
</UserControl>
```

#### 4.6. **PatientDashboardControl.xaml.cs**

```csharp
public partial class PatientDashboardControl : UserControl
{
    public PatientDashboardControl()
    {
        InitializeComponent();
    }
}
```

### 5. **App.xaml**

```xml
<Application x:Class="PatientApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Resource dictionaries -->
    </Application.Resources>
</Application>
```

### 6. **App.xaml.cs**

```csharp
public partial class App : Application
{
}
```

### Final Notes:

- This structure uses event-driven programming for navigation between different views (UserControls).
- Each ViewModel manages its own logic, such as patient registration, appointment confirmation, and managing the dashboard of confirmed patients.
- The `MainWindow.xaml` orchestrates the navigation and binds the correct ViewModels to the UserControls.

